import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
import statsmodels.api as sm
from numpy.linalg import inv

# Converting array and matrix to numpy objects
#
# Read x as input variable with two components
x = ([5, 2, 12, 9, 15, 6, 25, 16], [29, 21, 44, 32, 41, 27, 55, 58])
# Read autoinsurance ,ai as output variable
y = [64, 87, 50, 71, 44, 56, 42, 60]
ones = np.ones(len(y))
xval = np.transpose(x)
tt = np.linspace(1, 8, num=8)

# Addin column of 1 in xval
X = np.column_stack((xval, ones))
# The augmented matrix is X
# Result by using OLS function of statmodels
print(" Linear Regression by using OLS function ")
results = sm.OLS(y, X).fit()
print(results.summary())
print("----regression by matrix inversion----")
# Regression by Matrix inversion
b = np.transpose(y)
XT = np.transpose(X)
XTX = np.matmul(XT, X)
XTXInv = inv(XTX)
XX = np.matmul(XTXInv, XT)
A = np.matmul(XX, y)
print("The coefficients are")
print("Intercept is ")
yc = A[2]
print(yc)
print(" coefficients of x1 and x2 are ")
sl1 = A[0]
sl2 = A[1]
print(sl1)
print(sl2)
# 3 D plot of Regression fit two independent var and one dependent var
mpl.rcParams['legend.fontsize'] = 10
fig = plt.figure()
ax = fig.gca(projection='3d')
# ax.plot(x, y, z, label='parametric curve')
best_fit = []
for i in range(0, 8):
    best_fit.append(sl1 * X[i, 0] + sl2 * X[i, 1] + yc)
z = best_fit
x1 = X[0:8, 0]
x2 = X[0:8, 1]
# x1 ,x2 are two inputs and z is the best_fit generated by regression
ax.plot(x1, x2, z, color='r', label='Best_fit Vs Driver Experience  and Age')
# plt.xlabel(' Years of experience')
# plt.ylabel('Age of Driver')
ax.set_xlabel('Experience of Driver')
ax.set_ylabel('Age of Driver')
ax.set_zlabel('Insurance Premium')
# plt.title('Z-axis Insurance Premium with X-axis experience and Y-axis age of driver')
# 3D Plot
ax.legend()

fig, ax = plt.subplots()
plt.plot(tt, y, 'r*', label='Observed Output')
plt.plot(tt, z, 'bo', label='Computed Output')
plt.xlabel('Number of data points ')
plt.ylabel('Value of insurance premium')

plt.title('Plot of Observed output and computed Output')

# y is the observed output and z is the computed best_fit
leg = ax.legend()
plt.show()
